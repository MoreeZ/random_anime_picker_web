{"version":3,"sources":["actions/malActions.js","components/Carousel/CarouselHeader.jsx","components/Carousel/CarouselReady.jsx","components/Carousel/CarouselError.jsx","components/Carousel/CarouselEmpty.jsx","components/Carousel/Carousel.jsx","components/Section2.jsx","App.jsx","serviceWorker.js","reducers/mal.js","reducers/rootReducer.js","index.js"],"names":["pThrottle","require","pRetry","CarouselHeader","state","spinTime","handleSpin","e","anime","props","randomAnime","Math","floor","random","length","fetchAnime","mal_id","attemptsToFetch","setInterval","animeDescState","error","loading","currentAnime","realElement","document","getElementById","passVirtualSpace","parentElement","childNodes","offsetWidth","realContainerPosition","arrayOfElements","i","nodesToArray","indexOf","adjustCenter","window","innerWidth","console","log","title","spinMe","resetButton","displayWinner","querySelector","carousel","arrow","usernameInput","listTypeMenuIcon","animeDescription","mainHeader","style","transition","transform","opacity","pointerEvents","setTimeout","display","href","url","handleReset","this","className","onSubmit","handleSubmit","autoComplete","hintText","errorText","id","errorStyle","position","top","left","fontSize","tooltip","iconClassName","type","target","onItemClick","handleChangeListType","value","anchorOrigin","horizontal","vertical","targetOrigin","iconButtonElement","touch","primaryText","label","primary","onClick","secondary","Component","connect","mal","dispatch","Mal","then","j","res","payload","catch","err","fetchAnimeInfo","CarouselReady","shuffle","arr","renderXtimes","push","Fragment","map","key","eachAnime","src","image_url","alt","rel","filter","userAnime","CarouselFail","username","CarouselEmpty","formatListType","listType","Carousel","open","firstLoaded","handleOpen","setState","handleClose","preventDefault","errorMessage","displayOption","val","size","thickness","color","success","CarouselError","borderColor","zIndex","modal","onRequestClose","noAnime","currentUser","newUsername","user","anime_stats","total_entries","entries","pages","allAnime","throttled","run","a","filtered","each","watching_status","Number","JSON","parse","message","Response","retries","fetchUserAnimeList","clearError","changeUsername","Section2","animeInfo","episodes","genres","genre","index","name","status","aired","string","duration","rating","title_japanese","score","scored_by","rank","popularity","members","marginBottom","flexDirection","App","Boolean","location","hostname","match","initState","undefined","action","response","statusMessage","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0WACMA,EAAYC,EAAQ,KACpBC,EAASD,EAAQ,M,4HCQjBE,E,4MACJC,MAAQ,CAAEC,SAAU,K,EAEpBC,WAAa,SAAAC,GAAM,IACTC,EAAU,EAAKC,MAAfD,MASFE,EAAcF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,SAE3D,EAAKL,MAAMM,WAAWL,EAAYM,QAClC,IAAIC,EAAkB,EACtBC,aAAY,WAER,EAAKT,MAAMU,eAAeC,QACzB,EAAKX,MAAMU,eAAeE,SAC3BJ,GAAmB,KAEnBA,IACA,EAAKR,MAAMM,WAAW,EAAKN,MAAMa,iBAGlC,KAEH,IAAMC,EAAcC,SAASC,eAAef,EAAYM,QAElDU,GACHH,EAAYI,cAAcA,cAAcC,WAAWd,OAAS,GAC7DS,EAAYI,cAAcE,YAEtBC,EA9Be,SAAAF,GAEnB,IADA,IAAIG,EAAkB,GACbC,EAAIJ,EAAWd,SAAW,EAAGkB,KACpCD,EAAgBC,GAAKJ,EAAWI,GAElC,OAAOD,EA0BPE,CAAaV,EAAYI,cAAcC,YAAYM,QAAQX,IAC1DA,EAAYM,YAAc,IAEvBM,EACJC,OAAOC,WAAa,EACpB,GACA1B,KAAKE,UAAYU,EAAYM,YAAc,IAC7CS,QAAQC,IAAI7B,EAAY8B,MAAOjB,GAxCf,IA2CRlB,EAAa,EAAKD,MAAlBC,SAEFoC,EAASjB,SAASC,eAAe,eAAeE,cAChDe,EAAclB,SAASC,eAAe,wBACzCE,cACGgB,EAAgBnB,SAASoB,cAAc,mBACvCC,EAAWrB,SAASoB,cAAc,aAClCE,EAAQtB,SAASoB,cAAc,UAC/BG,EAAgBvB,SAASC,eAAe,kBAC3CE,cAAcA,cACXqB,EAAmBxB,SAASC,eAAe,uBAC3CwB,EAAmBzB,SAASC,eAChC,8BAEIyB,EAAa1B,SAASoB,cAAc,qBAG1CC,EAASM,MAAMC,WACb,aAAe/C,EAAW,wCAC5BwC,EAASM,MAAME,UACb,gBACC3B,EAAmBI,EAAwBK,GAC5C,MAGFM,EAAOU,MAAMG,QAAU,IACvBb,EAAOU,MAAME,UAAY,oBACzBZ,EAAOU,MAAMI,cAAgB,OAG7BP,EAAiBG,MAAMG,QAAU,IACjCN,EAAiBG,MAAME,UAAY,oBACnCL,EAAiBG,MAAMI,cAAgB,OAGvCT,EAAMK,MAAME,UAAY,YAGxBN,EAAcI,MAAMC,WAAa,iBACjCL,EAAcI,MAAMG,QAAU,IAC9BP,EAAcI,MAAME,UAAY,oBAChCN,EAAcI,MAAMI,cAAgB,OAGpC/B,SAASC,eAAe,uBAAuB0B,MAAME,UACnD,sBACF7B,SAASoB,cAAc,eAAeO,MAAMG,QAAU,IACtD9B,SAASoB,cAAc,eAAeO,MAAMG,QAAU,IAEtDE,YAAW,WAETf,EAAOU,MAAMM,QAAU,OACvBf,EAAYS,MAAMM,QAAU,OAC5BT,EAAiBG,MAAMM,QAAU,OACjCd,EAAcQ,MAAMM,QAAU,OAC9BV,EAAcI,MAAMM,QAAU,SAC7B,KAGHD,YAAW,WAGTb,EAAcQ,MAAMG,QAAU,IAC9BX,EAAce,KAAOhD,EAAYiD,IACjChB,EAAcQ,MAAME,UAAY,kBAChCV,EAAcQ,MAAMI,cAAgB,MAGpCb,EAAYS,MAAMG,QAAU,IAC5BZ,EAAYS,MAAME,UAAY,kBAC9BX,EAAYS,MAAMI,cAAgB,MAClCb,EAAYS,MAAMM,QAAU,OAG5BZ,EAASM,MAAMC,WAAa,iBAG5BH,EAAiBE,MAAMC,WAAa,wBACpCH,EAAiBE,MAAME,UAAY,iBAGnCH,EAAWC,MAAMC,WAAa,wBAC9BF,EAAWC,MAAME,UAAY,qBAC5BhD,I,EAGLuD,YAAc,SAAArD,GACZ,IAAMkC,EAASjB,SAASC,eAAe,eAAeE,cAChDe,EAAclB,SAASC,eAAe,wBACzCE,cACGgB,EAAgBnB,SAASoB,cAAc,mBACvCC,EAAWrB,SAASoB,cAAc,aAClCE,EAAQtB,SAASoB,cAAc,UAC/BG,EAAgBvB,SAASC,eAAe,kBAC3CE,cAAcA,cACXqB,EAAmBxB,SAASC,eAAe,uBAC3CwB,EAAmBzB,SAASC,eAChC,8BAEIyB,EAAa1B,SAASoB,cAAc,qBAG1CC,EAASM,MAAME,UAAY,qBAC3BR,EAASM,MAAMC,WACb,aACA,EAAKhD,MAAMC,SACX,yCAGFsC,EAAcQ,MAAMG,QAAU,IAC9BX,EAAcQ,MAAME,UAAY,oBAChCV,EAAcQ,MAAMI,cAAgB,OAGpCb,EAAYS,MAAMG,QAAU,IAC5BZ,EAAYS,MAAME,UAAY,oBAC9BX,EAAYS,MAAMI,cAAgB,OAElCT,EAAMK,MAAME,UAAY,YAGxBJ,EAAiBE,MAAME,UAAY,oBACnCJ,EAAiBE,MAAMC,WAAa,wBAGpCF,EAAWC,MAAMC,WAAa,wBAC9BF,EAAWC,MAAME,UAAY,iBAG7B7B,SAASC,eAAe,uBAAuB0B,MAAME,UACnD,kBACF7B,SAASoB,cAAc,eAAeO,MAAMG,QAAU,IACtD9B,SAASoB,cAAc,eAAeO,MAAMG,QAAU,IAGtDE,YAAW,WAETf,EAAOU,MAAMI,cAAgB,MAC7Bd,EAAOU,MAAMG,QAAU,IACvBb,EAAOU,MAAME,UAAY,kBAGzBL,EAAiBG,MAAMG,QAAU,IACjCN,EAAiBG,MAAME,UAAY,kBACnCL,EAAiBG,MAAMI,cAAgB,MAGvCR,EAAcI,MAAMG,QAAU,IAC9BP,EAAcI,MAAME,UAAY,kBAChCN,EAAcI,MAAMI,cAAgB,MACpCR,EAAcI,MAAMM,QAAU,OAG9Bd,EAAcQ,MAAMM,QAAU,OAC9Bf,EAAYS,MAAMM,QAAU,OAC5BhB,EAAOU,MAAMM,QAAU,OACvBT,EAAiBG,MAAMM,QAAU,SAChC,M,uDAGK,IACAjD,EAAUqD,KAAKpD,MAAfD,MACR,OACE,yBAAKsD,UAAU,eACb,yBAAKA,UAAU,gBACb,0BACEA,UAAU,oBACVC,SAAUF,KAAKpD,MAAMuD,cAErB,kBAAC,IAAD,CACEC,aAAa,MACbC,SAAS,4BACTC,UAAWN,KAAKpD,MAAMW,OAAS,mBAC/BgD,GAAG,iBACHC,WAAY,CACVC,SAAU,WACVC,IAAK,IACLC,KAAM,IACNjB,cAAe,OACfkB,SAAU,UAGd,kBAAC,IAAD,CACEC,QAAQ,UACRC,cAAc,iBACdC,KAAK,UAHP,SAQF,uBAAGd,UAAU,iBAAiBJ,KAAK,UAAUmB,OAAO,UAApD,wBAIF,yBAAKf,UAAU,iBACb,kBAAC,IAAD,CACEgB,YAAajB,KAAKpD,MAAMsE,qBACxBC,MAAOnB,KAAKpD,MAAMuE,MAClBC,aAAc,CAAEC,WAAY,QAASC,SAAU,OAC/CC,aAAc,CAAEF,WAAY,QAASC,SAAU,OAC/CE,kBACE,kBAAC,IAAD,CAAYC,OAAO,EAAMlB,GAAG,uBAC1B,kBAAC,IAAD,QAIJ,kBAAC,IAAD,CAAUmB,YAAY,gBAAgBP,MAAM,MAC5C,kBAAC,IAAD,CAAUO,YAAY,qBAAqBP,MAAM,MACjD,kBAAC,IAAD,CAAUO,YAAY,YAAYP,MAAM,MACxC,kBAAC,IAAD,CAAUO,YAAY,UAAUP,MAAM,MACtC,kBAAC,IAAD,CAAUO,YAAY,UAAUP,MAAM,OAExC,kBAAC,IAAD,CACEQ,MAAM,sBACNC,SAAS,EACTC,QAASlF,EAAMM,OAAS,EAAI+C,KAAKvD,WAAa,aAC9C8D,GAAG,cACHjB,MAAO,CACLC,WAAY,oBAGhB,kBAAC,IAAD,CACEoC,MAAM,oBACNG,WAAW,EACXD,QAASlF,EAAMM,OAAS,EAAI+C,KAAKD,YAAc,aAC/CQ,GAAG,uBACHjB,MAAO,CACLM,QAAS,OACTJ,UAAW,oBACXC,QAAS,IACTF,WAAY,iBACZG,cAAe,gB,GArRAqC,aA0SdC,eAbS,SAAAzF,GACtB,MAAO,CACLe,eAAgBf,EAAM0F,IAAI3E,eAC1BG,aAAclB,EAAM0F,IAAIxE,iBAGD,SAAAyE,GACzB,MAAO,CACLhF,WAAY,SAAAP,GACVuF,EDxNwB,SAAAvF,GAC5B,OAAO,SAAAuF,GAEL,OADAA,EAAS,CAAEnB,KAAM,qBAAsBtD,aAAcd,IAC9CwF,MAAIxF,MAAMA,GACdyF,MAAK,SAAAC,GAAC,OAAIA,KACVD,MAAK,SAAAE,GAAG,OAAIJ,EAAS,CAAEnB,KAAM,oBAAqBwB,QAASD,OAC3DE,OAAM,SAAAC,GAAG,OACRP,EAAS,CAAEnB,KAAM,4BAA6BxD,MAAOkF,QCiN9CC,CAAe/F,QAIfqF,CAGb1F,GCpTIqG,E,4MACJpG,MAAQ,G,EACRqG,QAAU,SAAAC,GACR,IAAK,IAAI1E,EAAI0E,EAAI5F,OAAS,EAAGkB,EAAI,EAAGA,IAAK,CACvC,IAAMkE,EAAIvF,KAAKC,MAAMD,KAAKE,UAAYmB,EAAI,IADH,EAEpB,CAAC0E,EAAIR,GAAIQ,EAAI1E,IAA/B0E,EAAI1E,GAFkC,KAE9B0E,EAAIR,GAF0B,KAIzC,OAAOQ,G,uDAEC,IACAlG,EAAUqD,KAAKpD,MAAfD,MACJmG,EAAe,GAEnB,GAAInG,EAAMM,OAAS,EACjB,IAAK,IAAIkB,EAAI,EAAGA,EAAI,GAAIA,GAAKxB,EAAMM,OACjC6F,EAAaC,KAAK5E,GAItB,OADAM,QAAQC,IAAI,4BAA6B/B,GAEvC,kBAAC,IAAMqG,SAAP,KACE,yBAAK/C,UAAU,UACf,yBAAKA,UAAU,YACZ6C,EAAaG,KAAI,SAAAvG,GAAC,OACjB,yBAAKuD,UAAU,oBAAoBiD,IAAKxG,GACrCC,EAAMsG,KAAI,SAAAE,GAAS,OAClB,yBACElD,UAAU,2BACViD,IAAKC,EAAUhG,QAEf,yBAAKiG,IAAKD,EAAUE,UAAWC,IAAKH,EAAUxE,QAC9C,yBAAKsB,UAAU,mBACb,uBACEJ,KAAMsD,EAAUrD,IAChBkB,OAAO,SACPuC,IAAI,uBAEHJ,EAAUxE,gBAOvB,yBAAKsB,UAAU,kBACZD,KAAK4C,QAAQjG,GAAOsG,KAAI,SAAAE,GAAS,OAChC,yBACElD,UAAU,wBACViD,IAAKC,EAAUhG,OACfoD,GAAI4C,EAAUhG,QAEd,yBAAKiG,IAAKD,EAAUE,UAAWC,IAAKH,EAAUxE,QAC9C,yBAAKsB,UAAU,mBACb,uBACEJ,KAAMsD,EAAUrD,IAChBkB,OAAO,SACPuC,IAAI,uBAEHJ,EAAUxE,aAMrB,yBAAKsB,UAAU,qBACZtD,EACE6G,QAAO,SAAAL,GAAS,OAAIxG,EAAM0B,QAAQ8E,GAAa,KAC/CF,KAAI,SAAAE,GAAS,OACZ,yBACElD,UAAU,2BACViD,IAAKC,EAAUhG,QAEf,yBAAKiG,IAAKD,EAAUE,UAAWC,IAAKH,EAAUxE,QAC9C,yBAAKsB,UAAU,mBACb,uBACEJ,KAAMsD,EAAUrD,IAChBkB,OAAO,SACPuC,IAAI,uBAEHJ,EAAUxE,mB,GA/ELoD,aA6GbC,eAlBS,SAAAzF,GACtB,OAAIA,EAAM0F,IAAIwB,WACRlH,EAAM0F,IAAIwB,UAAUxG,OACf,CACLN,MAAOJ,EAAM0F,IAAIwB,YAQd,CACL9G,MAAO,MAKEqF,CAAyBW,GC9FzBe,E,4MAfbnH,MAAQ,G,uDAEN,OACE,yBAAK0D,UAAU,2BACb,wBAAIA,UAAU,gBAAd,iBACiBD,KAAKpD,MAAM+G,SAD5B,yBAGA,wBAAI1D,UAAU,oBAAd,4E,GARmB8B,aCkCZ6B,E,4MAjCbrH,MAAQ,G,EACRsH,eAAiB,SAAAC,GACf,OAAQA,GACN,IAAK,IACH,MAAO,gBACT,IAAK,IACH,MAAO,qBACT,IAAK,IACH,MAAO,YACT,IAAK,IACH,MAAO,UACT,IAAK,IACH,MAAO,UACT,QACE,MAAO,qB,uDAIX,OACE,yBAAK7D,UAAU,2BACb,wBAAIA,UAAU,gBAAd,QACQD,KAAK6D,eAAe7D,KAAKpD,MAAMkH,UADvC,YAC2D,IACxD9D,KAAKpD,MAAM+G,SAFd,cAIA,wBAAI1D,UAAU,oBACXD,KAAKpD,MAAM+G,SADd,qCAEG3D,KAAK6D,eAAe7D,KAAKpD,MAAMkH,UAFlC,W,GAzBoB/B,a,kBCUtBgC,E,4MACJxH,MAAQ,CACNuH,SAAU,IACVE,MAAM,EACNC,aAAa,G,EAEfC,WAAa,WACX,EAAKC,SAAL,2BACK,EAAK5H,OADV,IAEEyH,MAAM,M,EAIVI,YAAc,WACZ,EAAKD,SAAL,2BACK,EAAK5H,OADV,IAEEyH,MAAM,M,EAuBV7D,aAAe,SAAAzD,GACbA,EAAE2H,iBADgB,IAEVnH,EAAe,EAAKN,MAApBM,WACR,GAA0B,KAAtBR,EAAEsE,OAAO,GAAGG,OAAgC,OAAhBzE,EAAEsE,OAAO,GAAa,CACpD9D,EAAWR,EAAEsE,OAAO,GAAGG,MAAO,EAAK5E,MAAMuH,UACzC,IAAI1G,EAAkB,EACtBC,aAAY,WAEoB,0BAA5B,EAAKT,MAAM0H,eACV,EAAK1H,MAAM2H,cAAc/G,SAC1BJ,GAAmB,KAEnBA,IACAF,EAAW,EAAKN,MAAM+G,SAAU,EAAKpH,MAAMuH,aAE5C,O,EAIP5C,qBAAuB,SAACxE,EAAG8H,GACzB,EAAKL,SAAL,2BACK,EAAK5H,OADV,IAEEuH,SAAUU,EAAI5H,MAAMuE,SAEtB,EAAKvE,MAAMM,WAAW,EAAKN,MAAM+G,SAAUa,EAAI5H,MAAMuE,Q,kEA3ClC,IAAD,OACVjE,EAAe8C,KAAKpD,MAApBM,WACRuB,QAAQC,IAAI,yBACZxB,EAAW8C,KAAKpD,MAAM+G,SAAU3D,KAAKzD,MAAMuH,UAC3C,IAAI1G,EAAkB,EACtBC,aAAY,WAEoB,0BAA5B,EAAKT,MAAM0H,eACV,EAAK1H,MAAM2H,cAAc/G,SAC1BJ,GAAmB,KAEnBA,IACAF,EAAW,EAAKN,MAAM+G,SAAU,EAAKpH,MAAMuH,aAI5C,O,+BA8BK,IAAD,EAC0B9D,KAAKpD,MAA9BD,EADD,EACCA,MAAO4H,EADR,EACQA,cACf,OACE,yBAAKtE,UAAU,iBACb,kBAAC,EAAD,CACEkB,MAAOnB,KAAKzD,MAAMuH,SAClBnH,MAAOA,EACPwD,aAAcH,KAAKG,aACnB5C,MAAmC,gBAA5ByC,KAAKpD,MAAM0H,aAClBpD,qBAAsBlB,KAAKkB,uBAE7B,yBAAKjB,UAAU,sBACZsE,EAAc/G,SACa,0BAA5BwC,KAAKpD,MAAM0H,aACT,yBAAKrE,UAAU,qBACb,kBAAC,IAAD,CACEwE,KAAM,IACNC,UAAW,GACXC,MAAM,UACN1E,UAAU,uBAGZsE,EAAcK,QAChB,kBAAC,EAAD,MAC8B,gBAA5B5E,KAAKpD,MAAM0H,aACb,kBAACO,EAAD,CAAelB,SAAU3D,KAAKpD,MAAM+G,WAEpC,kBAAC,EAAD,CACEG,SAAU9D,KAAKzD,MAAMuH,SACrBH,SAAU3D,KAAKpD,MAAM+G,YAI3B,yBAAK1D,UAAU,kBACb,kBAAC,IAAD,CACEX,MAAO,CACLwF,YAAa,QACbC,OAAQ,KAEVjE,cAAc,iBACdC,KAAK,SACLc,QAAS7B,KAAKkE,YAPhB,gBAWA,uBACErE,KAAK,sEACLU,GAAG,aAEH,yFACA,yBACE6C,IAAI,uFACJE,IAAI,UAGR,kBAAC,IAAD,CACE3E,MAAM,wBACNqG,OAAO,EACPhB,KAAMhE,KAAKzD,MAAMyH,KACjBiB,eAAgBjF,KAAKoE,aAErB,wCACS,+D,GAhIErC,aAsLRC,eA7CS,SAAAzF,GAEtB,OADAkC,QAAQC,IAAI,qBAAsBnC,EAAM0F,IAAIwB,WACxClH,EAAM0F,IAAIwB,UACuB,IAA/BlH,EAAM0F,IAAIwB,UAAUxG,OACf,CACLN,MAAOJ,EAAM0F,IAAIwB,UACjBc,cAAehI,EAAM0F,IAAIsC,cACzBW,SAAS,EACTZ,aAAc/H,EAAM0F,IAAIqC,aACxBX,SAAUpH,EAAM0F,IAAIkD,aAGf,CACLxI,MAAOJ,EAAM0F,IAAIwB,UACjBc,cAAehI,EAAM0F,IAAIsC,cACzBW,SAAS,EACTZ,aAAc/H,EAAM0F,IAAIqC,aACxBX,SAAUpH,EAAM0F,IAAIkD,aAIjB,CACLxI,MAAO,GACP4H,cAAehI,EAAM0F,IAAIsC,cACzBW,SAAS,EACTZ,aAAc/H,EAAM0F,IAAIqC,aACxBX,SAAUpH,EAAM0F,IAAIkD,gBAKC,SAAAjD,GACzB,MAAO,CACLhF,WAAY,SAACyG,EAAUG,GACrB5B,EL9K4B,SAACyB,EAAUG,GAC3C,OAAO,SAAA5B,GACLA,EAAS,CAAEnB,KAAM,mBAAoBqE,YAAazB,IAClDxB,MAAIkD,KAAK1B,GACNvB,MAAK,SAAAiD,GAAI,OAAIA,EAAKC,YAAYC,iBAC9BnD,MAAK,SAAAoD,GAMJ,IALA,IAAMC,EAAQ3I,KAAKC,MAAMyI,EAAU,KAAO,EACtCE,EAAW,GAETC,EAAYxJ,GAAU,SAAAgC,GAAC,OAAIA,IAAG,EAAG,KAJxB,WAMNA,GACPwH,EAAUxH,GACPiE,MAAK,WACJ,IAAMwD,EAAG,uCAAG,sBAAAC,EAAA,sEACa1D,MAAIkD,KAAK1B,EAAU,YAAa,MAAOxF,GAC3DiE,MAAK,SAAAE,GAEJ,OADAoD,EAAS3C,KAAT,MAAA2C,EAAQ,YAASpD,EAAI3F,QACd2F,KAERF,MAAK,SAAAE,GAEJ,OADA7D,QAAQC,IAAIP,EAAGmE,GACRA,KAERF,MAAK,WACJ,GAAIsD,EAASzI,SAAWuI,EAAS,CAC/B/G,QAAQC,IAAI,WAAYgH,GACxB,IAAMI,EAAWJ,EAASlC,QACxB,SAAAuC,GAAI,OAAIA,EAAKC,kBAAoBC,OAAOnC,MAE1C,OAAO5B,EAAS,CACdnB,KAAM,8BACNwB,QAASuD,QAIdtD,OAAM,SAAAC,GACL,GAEE,iDADAyD,KAAKC,MAAM1D,EAAIlF,OAAO6I,QAGtB,OAAOlE,EAAS,CACdnB,KAAM,0BACNxD,MAAOkF,OA7BL,uCAiCH4D,UAjCG,2CAAH,qDAmCT,sBAAC,sBAAAR,EAAA,sEACOxJ,EAAOuJ,EAAK,CAChBU,QAAS,IAFZ,0CAAD,MAMD9D,OAAM,SAAAC,GAAG,OAAIhE,QAAQC,IAAI,oBAAqB+D,OA5C1CtE,EAAI,EAAGA,GAAKsH,EAAOtH,IAAM,EAAzBA,OKmKFoI,CAAmB5C,EAAUG,KAExC0C,WAAY,SAAA7J,GACVuF,EAAS,CAAEnB,KAAM,sBAAuBwB,QAAS5F,KAEnD8J,eAAgB,SAAA9C,GACdzB,EAAS,CAAEnB,KAAM,8BAA+B4C,SAAUA,QAKjD3B,CAGb+B,GChMI2C,E,4MACJnK,MAAQ,G,uDAEE,IACAoK,EAAc3G,KAAKpD,MAAnB+J,UACR,OACE,yBAAKpG,GAAG,WAAWN,UAAU,WAC3B,yBAAKA,UAAU,cACb,yBAAKM,GAAG,8BACLoG,EACC,yBAAK1G,UAAU,iBACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,gBAAd,eACA,wBAAIA,UAAU,aACZ,4BACE,0BAAMA,UAAU,QAAhB,cACA,0BAAMA,UAAU,aAAa0G,EAAUC,WAEzC,4BACE,0BAAM3G,UAAU,QAAhB,YACC0G,EAAUE,OAAO5D,KAAI,SAAC6D,EAAOC,GAC5B,OAAIA,IAAUJ,EAAUE,OAAO5J,OAAS,EAC/B,0BAAMiG,IAAK4D,EAAM3J,QAAS2J,EAAME,MAEhC,0BAAM9D,IAAK4D,EAAM3J,QAAS2J,EAAME,KAAhC,UAIb,4BACE,0BAAM/G,UAAU,QAAhB,YACC0G,EAAUM,QAEb,4BACE,0BAAMhH,UAAU,QAAhB,WACC0G,EAAUO,MAAMC,QAEnB,4BACE,0BAAMlH,UAAU,QAAhB,cACC0G,EAAUS,UAEb,4BACE,0BAAMnH,UAAU,QAAhB,YACC0G,EAAUU,UAKjB,yBAAKpH,UAAU,mBACb,4BAAK0G,EAAUhI,OACf,4BAAKgI,EAAUW,iBAGjB,yBAAKrH,UAAU,iBACb,wBAAIA,UAAU,kBAAd,WACA,wBAAIA,UAAU,eACZ,4BACE,0BAAMA,UAAU,QAAhB,WACA,0BAAMA,UAAU,aAAa0G,EAAUY,QAEzC,4BACE,0BAAMtH,UAAU,QAAhB,eADF,IAEG0G,EAAUa,WAGb,4BACE,0BAAMvH,UAAU,QAAhB,YADF,IAC0C0G,EAAUc,MAEpD,4BACE,0BAAMxH,UAAU,QAAhB,gBADF,IAEG0G,EAAUe,YAEb,4BACE,0BAAMzH,UAAU,QAAhB,aACC0G,EAAUgB,YAMnB,yBAAK1H,UAAU,qBACb,kBAAC,IAAD,CACEwE,KAAM,IACNC,UAAW,GACXC,MAAM,UACN1E,UAAU,wBAKlB,yBAAKA,UAAU,oBACb,yBACEX,MAAO,CACLsB,SAAU,MACVgH,aAAc,OACdjD,MAAO,UAJX,eASA,wBACErF,MAAO,CACLM,QAAS,OACTiI,cAAe,QAHnB,SAMS,IACP,0BAAMtH,GAAG,uBACP,0BAAMN,UAAU,cAAhB,SACA,0BAAMA,UAAU,cAAhB,UACM,IAVV,YAeJ,kBAAC,EAAD,W,GAlHe8B,aAiIRC,eATS,SAAAzF,GAGtB,OAFIA,EAAM0F,IAAI0E,UAEP,CACLA,UAAWpK,EAAM0F,IAAI0E,UACrBrJ,eAAgBf,EAAM0F,IAAI3E,kBAIf0E,CAAyB0E,GCtHzBoB,MAZf,WACE,OACE,kBAAC,mBAAD,KACE,yBAAK7H,UAAU,OACb,8BACE,kBAAC,EAAD,UCGU8H,QACW,cAA7BxJ,OAAOyJ,SAASC,UAEe,UAA7B1J,OAAOyJ,SAASC,UAEhB1J,OAAOyJ,SAASC,SAASC,MACvB,2D,4CClBAC,EAAY,CAChB1E,eAAW2E,EACXzB,eAAWyB,EACX7D,cAAe,CACbK,SAAS,EACTpH,SAAS,EACTD,OAAO,GAETD,eAAgB,CACdsH,SAAS,EACTpH,SAAS,EACTD,OAAO,GAET+G,aAAc,GACda,YAAa,SACb1H,aAAc,IA6EDwE,EA1EH,WAAgC,IAA/B1F,EAA8B,uDAAtB4L,EAAWE,EAAW,uCACzC,OAAQA,EAAOtH,MACb,IAAK,mBACH,OAAO,2BACFxE,GADL,IAEEgI,cAAe,CACbK,SAAS,EACTpH,SAAS,EACTD,OAAO,GAET4H,YAAakD,EAAOjD,cAExB,IAAK,8BAEH,OADA3G,QAAQC,IAAI,wBAAyB2J,EAAO9F,SACrC,2BACFhG,GADL,IAEEkH,UAAW4E,EAAO9F,QAClBgC,cAAe,CACbK,SAAS,EACTpH,SAAS,EACTD,OAAO,GAET+G,aAAc,KAElB,IAAK,0BAEH,OADA7F,QAAQC,IAAI,aAAc2J,EAAO9K,OAC1B,2BACFhB,GADL,IAEEgI,cAAe,CACbK,SAAS,EACTpH,SAAS,EACTD,OAAO,GAET+G,aAAc+D,EAAO9K,MAAM+K,SAASC,gBAExC,IAAK,qBACH,OAAO,2BACFhM,GADL,IAEEe,eAAgB,CACdsH,SAAS,EACTpH,SAAS,EACTD,OAAO,GAETE,aAAc4K,EAAO5K,eAEzB,IAAK,oBACH,OAAO,2BACFlB,GADL,IAEEoK,UAAW0B,EAAO9F,QAClBjF,eAAgB,CACdsH,SAAS,EACTpH,SAAS,EACTD,OAAO,KAGb,IAAK,4BAEH,OADAkB,QAAQC,IAAI,4BAA6B2J,EAAO9K,OACzC,2BACFhB,GADL,IAEEe,eAAgB,CACdsH,SAAS,EACTpH,SAAS,EACTD,OAAO,KAGb,QACE,OAAOhB,IC7EEiM,EAJKC,YAAgB,CAClCxG,IAAKA,I,SCODyG,EAAQC,YACZH,EACAI,YACEC,YAAgBC,OAKpBC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEF/K,SAASC,eAAe,SH0GpB,kBAAmBqL,WACrBA,UAAUC,cAAcC,MAAM/G,MAAK,SAAAgH,GACjCA,EAAaC,iB","file":"static/js/main.43529985.chunk.js","sourcesContent":["import { Mal } from \"node-myanimelist\";\nconst pThrottle = require(\"p-throttle\");\nconst pRetry = require(\"p-retry\");\n\n// const run = async () => {\n//   const response = await Mal.user(\"Aemnesias\", \"animelist\", \"all\", 1);\n//   return response;\n// };\n\nexport const fetchUserAnimeList = (username, listType) => {\n  return dispatch => {\n    dispatch({ type: \"LOADING_MAL_DATA\", newUsername: username });\n    Mal.user(username)\n      .then(user => user.anime_stats.total_entries)\n      .then(entries => {\n        const pages = Math.floor(entries / 300) + 1;\n        let allAnime = [];\n\n        const throttled = pThrottle(i => i, 1, 1000);\n\n        for (let i = 1; i <= pages; i++) {\n          throttled(i)\n            .then(() => {\n              const run = async () => {\n                const response = await Mal.user(username, \"animelist\", \"all\", i)\n                  .then(res => {\n                    allAnime.push(...res.anime);\n                    return res;\n                  })\n                  .then(res => {\n                    console.log(i, res);\n                    return res;\n                  })\n                  .then(() => {\n                    if (allAnime.length === entries) {\n                      console.log(\"allAnime\", allAnime);\n                      const filtered = allAnime.filter(\n                        each => each.watching_status === Number(listType)\n                      );\n                      return dispatch({\n                        type: \"MAL_DATA_REQUEST_SUCCESSFUL\",\n                        payload: filtered\n                      });\n                    }\n                  })\n                  .catch(err => {\n                    if (\n                      JSON.parse(err.error).message ===\n                      \"Something went wrong, please try again later\"\n                    ) {\n                      return dispatch({\n                        type: \"MAL_DATA_REQUEST_FAILED\",\n                        error: err\n                      });\n                    }\n                  });\n                return Response;\n              };\n              (async () => {\n                await pRetry(run, {\n                  retries: 5\n                });\n              })();\n            })\n            .catch(err => console.log(\"ERROR HAS OCCURED\", err));\n        }\n      });\n  };\n};\n\n// export const fetchUserAnimeList = (username, listType) => {\n//   return dispatch => {\n//     dispatch({ type: \"LOADING_MAL_DATA\", newUsername: username });\n//     return Mal.user(username, \"animelist\", \"all\", \"3\")\n//       .then(MalData => {\n//         console.log(\"Response in Action: \", MalData);\n//         const filterType = MalData.anime.filter(\n//           each => each.watching_status === Number(listType)\n//         );\n//         return filterType;\n//       })\n//       .then(res =>\n//         dispatch({ type: \"MAL_DATA_REQUEST_SUCCESSFUL\", payload: res })\n//       )\n//       .catch(err => dispatch({ type: \"MAL_DATA_REQUEST_FAILED\", error: err }));\n//   };\n// };\n\nexport const fetchAnimeInfo = anime => {\n  return dispatch => {\n    dispatch({ type: \"LOADING_ANIME_INFO\", currentAnime: anime });\n    return Mal.anime(anime)\n      .then(j => j)\n      .then(res => dispatch({ type: \"ANIME_INFO_LOADED\", payload: res }))\n      .catch(err =>\n        dispatch({ type: \"ANIME_INFO_FAILED_TO_LOAD\", error: err })\n      );\n  };\n};\n","import React, { Component } from \"react\";\nimport Input from \"material-ui/TextField\";\nimport Button from \"material-ui/RaisedButton\";\nimport IconButton from \"material-ui/IconButton\";\nimport MenuItem from \"material-ui/MenuItem\";\nimport NavigationExpandMoreIcon from \"material-ui/svg-icons/navigation/expand-more\";\nimport IconMenu from \"material-ui/IconMenu\";\nimport { connect } from \"react-redux\";\nimport { fetchAnimeInfo } from \"../../actions/malActions\";\n\nclass CarouselHeader extends Component {\n  state = { spinTime: 10000 };\n\n  handleSpin = e => {\n    const { anime } = this.props;\n    const nodesToArray = childNodes => {\n      let arrayOfElements = [];\n      for (var i = childNodes.length >>> 0; i--; ) {\n        arrayOfElements[i] = childNodes[i];\n      }\n      return arrayOfElements;\n    };\n\n    const randomAnime = anime[Math.floor(Math.random() * anime.length)];\n    //IMPORTANT => fetches\n    this.props.fetchAnime(randomAnime.mal_id);\n    let attemptsToFetch = 0;\n    setInterval(() => {\n      if (\n        this.props.animeDescState.error &&\n        !this.props.animeDescState.loading &&\n        attemptsToFetch <= 20\n      ) {\n        attemptsToFetch++;\n        this.props.fetchAnime(this.props.currentAnime);\n        // console.log(\"animeDescState\", this.props.animeDescState);\n      } else return;\n    }, 1000);\n\n    const realElement = document.getElementById(randomAnime.mal_id);\n\n    const passVirtualSpace =\n      (realElement.parentElement.parentElement.childNodes.length - 2) *\n      realElement.parentElement.offsetWidth;\n\n    const realContainerPosition =\n      nodesToArray(realElement.parentElement.childNodes).indexOf(realElement) *\n      (realElement.offsetWidth + 20);\n\n    const adjustCenter =\n      window.innerWidth / 2 -\n      18 -\n      Math.random() * (realElement.offsetWidth - 13);\n    console.log(randomAnime.title, realElement); // <== Logs the winner\n\n    // ====================== ANIMATIONS + DISPLAYS ========================\n    const { spinTime } = this.state; //ms\n\n    const spinMe = document.getElementById(\"spin-button\").parentElement;\n    const resetButton = document.getElementById(\"reset-spinner-button\")\n      .parentElement;\n    const displayWinner = document.querySelector(\".display-winner\");\n    const carousel = document.querySelector(\".carousel\");\n    const arrow = document.querySelector(\".arrow\");\n    const usernameInput = document.getElementById(\"username-input\")\n      .parentElement.parentElement;\n    const listTypeMenuIcon = document.getElementById(\"list-type-menu-icon\");\n    const animeDescription = document.getElementById(\n      \"absolute-anime-description\"\n    );\n    const mainHeader = document.querySelector(\".header-container\");\n    //================ STAGE 1 (instant onClick) ================\n    //run the carousel\n    carousel.style.transition =\n      \"transform \" + spinTime + \"ms cubic-bezier(0.165, 0.84, 0.44, 1)\";\n    carousel.style.transform =\n      \"translateX(-\" +\n      (passVirtualSpace + realContainerPosition - adjustCenter) +\n      \"px)\";\n\n    //hide spin button\n    spinMe.style.opacity = \"0\";\n    spinMe.style.transform = \"translateY(-40px)\";\n    spinMe.style.pointerEvents = \"none\";\n\n    //hide listType menu icon\n    listTypeMenuIcon.style.opacity = \"0\";\n    listTypeMenuIcon.style.transform = \"translateY(-40px)\";\n    listTypeMenuIcon.style.pointerEvents = \"none\";\n\n    //show arrow\n    arrow.style.transform = \"scaleY(1)\";\n\n    //hide usernameInput\n    usernameInput.style.transition = \"all 200ms ease\";\n    usernameInput.style.opacity = \"0\";\n    usernameInput.style.transform = \"translateY(-40px)\";\n    usernameInput.style.pointerEvents = \"none\";\n\n    //change color of \"ANIME\" in header\n    document.getElementById(\"anime-color-swapper\").style.transform =\n      \"translateY(-1.24em)\";\n    document.querySelector(\".pink-anime\").style.opacity = \"1\";\n    document.querySelector(\".blue-anime\").style.opacity = \"0\";\n\n    setTimeout(() => {\n      // \"show\" reset and hide spinMe ALSO set disply of listType icon to none\n      spinMe.style.display = \"none\";\n      resetButton.style.display = \"flex\";\n      listTypeMenuIcon.style.display = \"none\";\n      displayWinner.style.display = \"flex\";\n      usernameInput.style.display = \"none\";\n    }, 300);\n\n    // ================ STAGE 2 (after spinenr stops) ================\n    setTimeout(() => {\n      //show winner name\n      // displayWinner.textContent = randomAnime.title;\n      displayWinner.style.opacity = \"1\";\n      displayWinner.href = randomAnime.url;\n      displayWinner.style.transform = \"translateY(0px)\";\n      displayWinner.style.pointerEvents = \"all\";\n\n      //show reset button\n      resetButton.style.opacity = \"1\";\n      resetButton.style.transform = \"translateY(0px)\";\n      resetButton.style.pointerEvents = \"all\";\n      resetButton.style.display = \"flex\";\n\n      //make transition instant\n      carousel.style.transition = \"all 500ms ease\";\n\n      //show Anime description\n      animeDescription.style.transition = \"all 200ms ease-in-out\";\n      animeDescription.style.transform = \"translateX(0%)\";\n\n      //hide header\n      mainHeader.style.transition = \"all 200ms ease-in-out\";\n      mainHeader.style.transform = \"translateX(100%)\";\n    }, spinTime);\n  };\n\n  handleReset = e => {\n    const spinMe = document.getElementById(\"spin-button\").parentElement;\n    const resetButton = document.getElementById(\"reset-spinner-button\")\n      .parentElement;\n    const displayWinner = document.querySelector(\".display-winner\");\n    const carousel = document.querySelector(\".carousel\");\n    const arrow = document.querySelector(\".arrow\");\n    const usernameInput = document.getElementById(\"username-input\")\n      .parentElement.parentElement;\n    const listTypeMenuIcon = document.getElementById(\"list-type-menu-icon\");\n    const animeDescription = document.getElementById(\n      \"absolute-anime-description\"\n    );\n    const mainHeader = document.querySelector(\".header-container\");\n\n    //STAGE 3 (reset)\n    carousel.style.transform = \"translateX(-100px)\";\n    carousel.style.transition =\n      \"transform \" +\n      this.state.spinTime +\n      \"ms cubic-bezier(0.165, 0.84, 0.44, 1);\";\n\n    //hide winner name\n    displayWinner.style.opacity = \"0\";\n    displayWinner.style.transform = \"translateY(-50px)\";\n    displayWinner.style.pointerEvents = \"none\";\n\n    //hide reset button\n    resetButton.style.opacity = \"0\";\n    resetButton.style.transform = \"translateY(-50px)\";\n    resetButton.style.pointerEvents = \"none\";\n    //hide arrow\n    arrow.style.transform = \"scaleY(0)\";\n\n    //Hide anime Info\n    animeDescription.style.transform = \"translateX(-100%)\";\n    animeDescription.style.transition = \"all 500ms ease-in-out\";\n\n    //Show header\n    mainHeader.style.transition = \"all 500ms ease-in-out\";\n    mainHeader.style.transform = \"translateX(0%)\";\n\n    //change color of \"ANIME\" in header\n    document.getElementById(\"anime-color-swapper\").style.transform =\n      \"translateY(0px)\";\n    document.querySelector(\".pink-anime\").style.opacity = \"0\";\n    document.querySelector(\".blue-anime\").style.opacity = \"1\";\n\n    //show spin & usernameInput\n    setTimeout(() => {\n      //show spin button\n      spinMe.style.pointerEvents = \"all\";\n      spinMe.style.opacity = \"1\";\n      spinMe.style.transform = \"translateY(0px)\";\n\n      //show listType menu icon\n      listTypeMenuIcon.style.opacity = \"1\";\n      listTypeMenuIcon.style.transform = \"translateY(0px)\";\n      listTypeMenuIcon.style.pointerEvents = \"all\";\n\n      //show usernameInput\n      usernameInput.style.opacity = \"1\";\n      usernameInput.style.transform = \"translateY(0px)\";\n      usernameInput.style.pointerEvents = \"all\";\n      usernameInput.style.display = \"flex\";\n\n      // remove/add displays\n      displayWinner.style.display = \"none\";\n      resetButton.style.display = \"none\";\n      spinMe.style.display = \"flex\";\n      listTypeMenuIcon.style.display = \"flex\";\n    }, 300);\n  };\n\n  render() {\n    const { anime } = this.props;\n    return (\n      <div className=\"top-toolbar\">\n        <div className=\"toolbar-left\">\n          <form\n            className=\"mal-username-form\"\n            onSubmit={this.props.handleSubmit}\n          >\n            <Input\n              autoComplete=\"off\"\n              hintText=\"Your MyAnimeList username\"\n              errorText={this.props.error && \"Invalid username\"}\n              id=\"username-input\"\n              errorStyle={{\n                position: \"absolute\",\n                top: \"0\",\n                left: \"0\",\n                pointerEvents: \"none\",\n                fontSize: \"12px\"\n              }}\n            />\n            <IconButton\n              tooltip=\"Confirm\"\n              iconClassName=\"material-icons\"\n              type=\"submit\"\n            >\n              done\n            </IconButton>\n          </form>\n          <a className=\"display-winner\" href=\"loading\" target=\"_blank\">\n            View at MyAnimeList\n          </a>\n        </div>\n        <div className=\"toolbar-right\">\n          <IconMenu\n            onItemClick={this.props.handleChangeListType}\n            value={this.props.value}\n            anchorOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n            targetOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n            iconButtonElement={\n              <IconButton touch={true} id=\"list-type-menu-icon\">\n                <NavigationExpandMoreIcon />\n              </IconButton>\n            }\n          >\n            <MenuItem primaryText=\"Plan To Watch\" value=\"6\" />\n            <MenuItem primaryText=\"Currently Watching\" value=\"1\" />\n            <MenuItem primaryText=\"Completed\" value=\"2\" />\n            <MenuItem primaryText=\"On Hold\" value=\"3\" />\n            <MenuItem primaryText=\"Dropped\" value=\"4\" />\n          </IconMenu>\n          <Button\n            label=\"ROLL A RANDOM ANIME\"\n            primary={true}\n            onClick={anime.length > 0 ? this.handleSpin : () => {}}\n            id=\"spin-button\"\n            style={{\n              transition: \"all 200ms ease\"\n            }}\n          />\n          <Button\n            label=\"RESET THE SPINNER\"\n            secondary={true}\n            onClick={anime.length > 0 ? this.handleReset : () => {}}\n            id=\"reset-spinner-button\"\n            style={{\n              display: \"none\",\n              transform: \"translateY(-20px)\",\n              opacity: \"0\",\n              transition: \"all 200ms ease\",\n              pointerEvents: \"none\"\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    animeDescState: state.mal.animeDescState,\n    currentAnime: state.mal.currentAnime\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAnime: anime => {\n      dispatch(fetchAnimeInfo(anime));\n    }\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CarouselHeader);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass CarouselReady extends Component {\n  state = {};\n  shuffle = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  };\n  render() {\n    const { anime } = this.props;\n    let renderXtimes = [];\n    //change the value of i < X to render more virtual elements in the spinner\n    if (anime.length > 0) {\n      for (let i = 0; i < 80; i += anime.length) {\n        renderXtimes.push(i);\n      }\n    }\n    console.log(\"anime in current listType\", anime);\n    return (\n      <React.Fragment>\n        <div className=\"arrow\" />\n        <div className=\"carousel\">\n          {renderXtimes.map(e => (\n            <div className=\"virtual-container\" key={e}>\n              {anime.map(eachAnime => (\n                <div\n                  className=\"virtual-image each-image\"\n                  key={eachAnime.mal_id}\n                >\n                  <img src={eachAnime.image_url} alt={eachAnime.title} />\n                  <div className=\"anime-quickdesc\">\n                    <a\n                      href={eachAnime.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {eachAnime.title}\n                    </a>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ))}\n          <div className=\"real-container\">\n            {this.shuffle(anime).map(eachAnime => (\n              <div\n                className=\"real-image each-image\"\n                key={eachAnime.mal_id}\n                id={eachAnime.mal_id}\n              >\n                <img src={eachAnime.image_url} alt={eachAnime.title} />\n                <div className=\"anime-quickdesc\">\n                  <a\n                    href={eachAnime.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {eachAnime.title}\n                  </a>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"virtual-container\">\n            {anime\n              .filter(eachAnime => anime.indexOf(eachAnime) < 3)\n              .map(eachAnime => (\n                <div\n                  className=\"virtual-image each-image\"\n                  key={eachAnime.mal_id}\n                >\n                  <img src={eachAnime.image_url} alt={eachAnime.title} />\n                  <div className=\"anime-quickdesc\">\n                    <a\n                      href={eachAnime.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {eachAnime.title}\n                    </a>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  if (state.mal.userAnime) {\n    if (state.mal.userAnime.length === 0) {\n      return {\n        anime: state.mal.userAnime\n      };\n    } else {\n      return {\n        anime: state.mal.userAnime\n      };\n    }\n  } else {\n    return {\n      anime: []\n    };\n  }\n};\n\nexport default connect(mapStateToProps)(CarouselReady);\n","import React, { Component } from \"react\";\n\nclass CarouselFail extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"error-message-container\">\n        <h1 className=\"error-header\">\n          The username \"{this.props.username}\" has not been found.\n        </h1>\n        <h4 className=\"error-subheading\">\n          Make sure the username you have entered is verified at MyAnimeList.\n        </h4>\n      </div>\n    );\n  }\n}\n\nexport default CarouselFail;\n","import React, { Component } from \"react\";\n\nclass CarouselEmpty extends Component {\n  state = {};\n  formatListType = listType => {\n    switch (listType) {\n      case \"6\":\n        return \"Plan To Watch\";\n      case \"1\":\n        return \"Currently Watching\";\n      case \"2\":\n        return \"Completed\";\n      case \"4\":\n        return \"Dropped\";\n      case \"3\":\n        return \"On Hold\";\n      default:\n        return \"Select list type\";\n    }\n  };\n  render() {\n    return (\n      <div className=\"error-message-container\">\n        <h1 className=\"error-header\">\n          The \"{this.formatListType(this.props.listType)}\" List of{\" \"}\n          {this.props.username} is empty.\n        </h1>\n        <h4 className=\"error-subheading\">\n          {this.props.username} must have at least one anime in \"\n          {this.formatListType(this.props.listType)}\".\n        </h4>\n      </div>\n    );\n  }\n}\n\nexport default CarouselEmpty;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchUserAnimeList } from \"../../actions/malActions\";\nimport CircularProgress from \"material-ui/CircularProgress\";\n\nimport CarouselHeader from \"./CarouselHeader\";\nimport CarouselReady from \"./CarouselReady\";\nimport CarouselError from \"./CarouselError\";\nimport CarouselEmpty from \"./CarouselEmpty\";\nimport IconButton from \"material-ui/IconButton\";\nimport Dialog from \"material-ui/Dialog\";\n\nclass Carousel extends Component {\n  state = {\n    listType: \"6\",\n    open: false,\n    firstLoaded: false\n  };\n  handleOpen = () => {\n    this.setState({\n      ...this.state,\n      open: true\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      ...this.state,\n      open: false\n    });\n  };\n\n  componentDidMount() {\n    const { fetchAnime } = this.props;\n    console.log(\"COMPONENT HAS MOUNTED\");\n    fetchAnime(this.props.username, this.state.listType);\n    let attemptsToFetch = 0;\n    setInterval(() => {\n      if (\n        this.props.errorMessage === \"Internal Server Error\" &&\n        !this.props.displayOption.loading &&\n        attemptsToFetch <= 20\n      ) {\n        attemptsToFetch++;\n        fetchAnime(this.props.username, this.state.listType);\n      } else {\n        return;\n      }\n    }, 1000);\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { fetchAnime } = this.props;\n    if (e.target[0].value !== \"\" && e.target[0] !== null) {\n      fetchAnime(e.target[0].value, this.state.listType);\n      let attemptsToFetch = 0;\n      setInterval(() => {\n        if (\n          this.props.errorMessage === \"Internal Server Error\" &&\n          !this.props.displayOption.loading &&\n          attemptsToFetch <= 20\n        ) {\n          attemptsToFetch++;\n          fetchAnime(this.props.username, this.state.listType);\n        } else return;\n      }, 1000);\n    }\n  };\n\n  handleChangeListType = (e, val) => {\n    this.setState({\n      ...this.state,\n      listType: val.props.value\n    });\n    this.props.fetchAnime(this.props.username, val.props.value);\n  };\n\n  render() {\n    const { anime, displayOption } = this.props;\n    return (\n      <div className=\"main-carousel\">\n        <CarouselHeader\n          value={this.state.listType}\n          anime={anime}\n          handleSubmit={this.handleSubmit}\n          error={this.props.errorMessage === \"Bad Request\"}\n          handleChangeListType={this.handleChangeListType}\n        />\n        <div className=\"carousel-container\">\n          {displayOption.loading ||\n          this.props.errorMessage === \"Internal Server Error\" ? (\n            <div className=\"loading-container\">\n              <CircularProgress\n                size={150}\n                thickness={10}\n                color=\"#f1f1f1\"\n                className=\"circular-progress\"\n              />\n            </div>\n          ) : displayOption.success ? (\n            <CarouselReady />\n          ) : this.props.errorMessage === \"Bad Request\" ? (\n            <CarouselError username={this.props.username} />\n          ) : (\n            <CarouselEmpty\n              listType={this.state.listType}\n              username={this.props.username}\n            />\n          )}\n        </div>\n        <div className=\"bottom-toolbar\">\n          <IconButton\n            style={{\n              borderColor: \"white\",\n              zIndex: \"3\"\n            }}\n            iconClassName=\"material-icons\"\n            type=\"submit\"\n            onClick={this.handleOpen}\n          >\n            contact_mail\n          </IconButton>\n          <a\n            href=\"https://play.google.com/store/apps/details?id=com.randomanimepicker\"\n            id=\"play-icon\"\n          >\n            <span>Download my app with many more features on Google Play!</span>\n            <img\n              src=\"https://downloads.andyroid.net/wp-content/uploads/2015/09/Google-Play-Store-icon.png\"\n              alt=\"PLAY\"\n            />\n          </a>\n          <Dialog\n            title=\"Contact the developer\"\n            modal={false}\n            open={this.state.open}\n            onRequestClose={this.handleClose}\n          >\n            <span>\n              Email: <span>moreez@protonmail.com</span>\n            </span>\n          </Dialog>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  console.log(\"updated user anime\", state.mal.userAnime);\n  if (state.mal.userAnime) {\n    if (state.mal.userAnime.length === 0) {\n      return {\n        anime: state.mal.userAnime,\n        displayOption: state.mal.displayOption,\n        noAnime: true,\n        errorMessage: state.mal.errorMessage,\n        username: state.mal.currentUser\n      };\n    } else {\n      return {\n        anime: state.mal.userAnime,\n        displayOption: state.mal.displayOption,\n        noAnime: false,\n        errorMessage: state.mal.errorMessage,\n        username: state.mal.currentUser\n      };\n    }\n  } else {\n    return {\n      anime: [],\n      displayOption: state.mal.displayOption,\n      noAnime: false,\n      errorMessage: state.mal.errorMessage,\n      username: state.mal.currentUser\n    };\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAnime: (username, listType) => {\n      dispatch(fetchUserAnimeList(username, listType));\n    },\n    clearError: anime => {\n      dispatch({ type: \"CLEAR_ERROR_MESSAGE\", payload: anime });\n    },\n    changeUsername: username => {\n      dispatch({ type: \"MAL_DATA_REQUEST_SUCCESSFUL\", username: username });\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Carousel);\n","import React, { Component } from \"react\";\nimport Carousel from \"./Carousel/Carousel\";\nimport { connect } from \"react-redux\";\nimport CircularProgress from \"material-ui/CircularProgress\";\n\nclass Section2 extends Component {\n  state = {};\n\n  render() {\n    const { animeInfo } = this.props;\n    return (\n      <div id=\"section2\" className=\"section\">\n        <div className=\"mal-header\">\n          <div id=\"absolute-anime-description\">\n            {animeInfo ? (\n              <div className=\"anime-details\">\n                <div className=\"anime-info\">\n                  <h3 className=\"info-heading\">Information</h3>\n                  <ul className=\"info-list\">\n                    <li>\n                      <span className=\"bold\">Episodes: </span>\n                      <span className=\"pink bold\">{animeInfo.episodes}</span>\n                    </li>\n                    <li>\n                      <span className=\"bold\">Genres: </span>\n                      {animeInfo.genres.map((genre, index) => {\n                        if (index === animeInfo.genres.length - 1) {\n                          return <span key={genre.mal_id}>{genre.name}</span>;\n                        } else {\n                          return <span key={genre.mal_id}>{genre.name}, </span>;\n                        }\n                      })}\n                    </li>\n                    <li>\n                      <span className=\"bold\">Status: </span>\n                      {animeInfo.status}\n                    </li>\n                    <li>\n                      <span className=\"bold\">Aired: </span>\n                      {animeInfo.aired.string}\n                    </li>\n                    <li>\n                      <span className=\"bold\">Duration: </span>\n                      {animeInfo.duration}\n                    </li>\n                    <li>\n                      <span className=\"bold\">Rating: </span>\n                      {animeInfo.rating}\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"anime-desc-main\">\n                  <h2>{animeInfo.title}</h2>\n                  <h5>{animeInfo.title_japanese}</h5>\n                </div>\n\n                <div className=\"anime-ratings\">\n                  <h3 className=\"rating-heading\">Ratings</h3>\n                  <ul className=\"rating-list\">\n                    <li>\n                      <span className=\"bold\">Score: </span>\n                      <span className=\"pink bold\">{animeInfo.score}</span>\n                    </li>\n                    <li>\n                      <span className=\"bold\">Scored by: </span>#\n                      {animeInfo.scored_by}\n                    </li>\n\n                    <li>\n                      <span className=\"bold\">Ranked: </span>#{animeInfo.rank}\n                    </li>\n                    <li>\n                      <span className=\"bold\">Popularity: </span>#\n                      {animeInfo.popularity}\n                    </li>\n                    <li>\n                      <span className=\"bold\">Members: </span>\n                      {animeInfo.members}\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            ) : (\n              <div className=\"loading-container\">\n                <CircularProgress\n                  size={150}\n                  thickness={10}\n                  color=\"#f1f1f1\"\n                  className=\"circular-progress\"\n                />\n              </div>\n            )}\n          </div>\n          <div className=\"header-container\">\n            <div\n              style={{\n                fontSize: \"2em\",\n                marginBottom: \"20px\",\n                color: \"white\"\n              }}\n            >\n              MyAnimeList\n            </div>\n            <h5\n              style={{\n                display: \"flex\",\n                flexDirection: \"row\"\n              }}\n            >\n              RANDOM{\" \"}\n              <span id=\"anime-color-swapper\">\n                <span className=\"blue-anime\">ANIME</span>\n                <span className=\"pink-anime\">ANIME</span>\n              </span>{\" \"}\n              PICKER\n            </h5>\n          </div>\n        </div>\n        <Carousel />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  if (state.mal.animeInfo) {\n  }\n  return {\n    animeInfo: state.mal.animeInfo,\n    animeDescState: state.mal.animeDescState\n  };\n};\n\nexport default connect(mapStateToProps)(Section2);\n","import React from \"react\";\nimport { MuiThemeProvider } from \"material-ui/styles\";\nimport Section2 from \"./components/Section2\";\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <div className=\"App\">\n        <main>\n          <Section2 />\n        </main>\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n  userAnime: undefined,\n  animeInfo: undefined,\n  displayOption: {\n    success: false,\n    loading: false,\n    error: false\n  },\n  animeDescState: {\n    success: false,\n    loading: false,\n    error: false\n  },\n  errorMessage: \"\",\n  currentUser: \"moreez\",\n  currentAnime: {}\n};\n\nconst mal = (state = initState, action) => {\n  switch (action.type) {\n    case \"LOADING_MAL_DATA\":\n      return {\n        ...state,\n        displayOption: {\n          success: false,\n          loading: true,\n          error: false\n        },\n        currentUser: action.newUsername\n      };\n    case \"MAL_DATA_REQUEST_SUCCESSFUL\":\n      console.log(\"response in reducer: \", action.payload);\n      return {\n        ...state,\n        userAnime: action.payload,\n        displayOption: {\n          success: true,\n          loading: false,\n          error: false\n        },\n        errorMessage: \"\"\n      };\n    case \"MAL_DATA_REQUEST_FAILED\":\n      console.log(\"MAL FAILED\", action.error);\n      return {\n        ...state,\n        displayOption: {\n          success: false,\n          loading: false,\n          error: true\n        },\n        errorMessage: action.error.response.statusMessage\n      };\n    case \"LOADING_ANIME_INFO\":\n      return {\n        ...state,\n        animeDescState: {\n          success: false,\n          loading: true,\n          error: false\n        },\n        currentAnime: action.currentAnime\n      };\n    case \"ANIME_INFO_LOADED\":\n      return {\n        ...state,\n        animeInfo: action.payload,\n        animeDescState: {\n          success: true,\n          loading: false,\n          error: false\n        }\n      };\n    case \"ANIME_INFO_FAILED_TO_LOAD\":\n      console.log(\"FAILED TO LOAD ANIME INFO\", action.error);\n      return {\n        ...state,\n        animeDescState: {\n          success: false,\n          loading: false,\n          error: true\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// loadingError: JSON.parse(\n//   JSON.parse(action.error.message.replace(/^400 - /, \"\"))\n// )\n\nexport default mal;\n","import { combineReducers } from \"redux\";\nimport mal from \"./mal\";\n\nconst rootReducer = combineReducers({\n  mal: mal\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./css_imports.js\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}